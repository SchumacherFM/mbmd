// Code generated by "enumer -type=Unit -transform=snake"; DO NOT EDIT.

package units

import (
	"fmt"
	"strings"
)

const _UnitName = "kilo_var_hourkilo_watt_hourjouleamperevoltwattvoltamperevardegreedegree_celsiushertzpercentno_unit"

var _UnitIndex = [...]uint8{0, 13, 27, 32, 38, 42, 46, 56, 59, 65, 79, 84, 91, 98}

const _UnitLowerName = "kilo_var_hourkilo_watt_hourjouleamperevoltwattvoltamperevardegreedegree_celsiushertzpercentno_unit"

func (i Unit) String() string {
	i -= 1
	if i < 0 || i >= Unit(len(_UnitIndex)-1) {
		return fmt.Sprintf("Unit(%d)", i+1)
	}
	return _UnitName[_UnitIndex[i]:_UnitIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UnitNoOp() {
	var x [1]struct{}
	_ = x[KiloVarHour-(1)]
	_ = x[KiloWattHour-(2)]
	_ = x[Joule-(3)]
	_ = x[Ampere-(4)]
	_ = x[Volt-(5)]
	_ = x[Watt-(6)]
	_ = x[Voltampere-(7)]
	_ = x[Var-(8)]
	_ = x[Degree-(9)]
	_ = x[DegreeCelsius-(10)]
	_ = x[Hertz-(11)]
	_ = x[Percent-(12)]
	_ = x[NoUnit-(13)]
}

var _UnitValues = []Unit{KiloVarHour, KiloWattHour, Joule, Ampere, Volt, Watt, Voltampere, Var, Degree, DegreeCelsius, Hertz, Percent, NoUnit}

var _UnitNameToValueMap = map[string]Unit{
	_UnitName[0:13]:       KiloVarHour,
	_UnitLowerName[0:13]:  KiloVarHour,
	_UnitName[13:27]:      KiloWattHour,
	_UnitLowerName[13:27]: KiloWattHour,
	_UnitName[27:32]:      Joule,
	_UnitLowerName[27:32]: Joule,
	_UnitName[32:38]:      Ampere,
	_UnitLowerName[32:38]: Ampere,
	_UnitName[38:42]:      Volt,
	_UnitLowerName[38:42]: Volt,
	_UnitName[42:46]:      Watt,
	_UnitLowerName[42:46]: Watt,
	_UnitName[46:56]:      Voltampere,
	_UnitLowerName[46:56]: Voltampere,
	_UnitName[56:59]:      Var,
	_UnitLowerName[56:59]: Var,
	_UnitName[59:65]:      Degree,
	_UnitLowerName[59:65]: Degree,
	_UnitName[65:79]:      DegreeCelsius,
	_UnitLowerName[65:79]: DegreeCelsius,
	_UnitName[79:84]:      Hertz,
	_UnitLowerName[79:84]: Hertz,
	_UnitName[84:91]:      Percent,
	_UnitLowerName[84:91]: Percent,
	_UnitName[91:98]:      NoUnit,
	_UnitLowerName[91:98]: NoUnit,
}

var _UnitNames = []string{
	_UnitName[0:13],
	_UnitName[13:27],
	_UnitName[27:32],
	_UnitName[32:38],
	_UnitName[38:42],
	_UnitName[42:46],
	_UnitName[46:56],
	_UnitName[56:59],
	_UnitName[59:65],
	_UnitName[65:79],
	_UnitName[79:84],
	_UnitName[84:91],
	_UnitName[91:98],
}

// UnitString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UnitString(s string) (Unit, error) {
	if val, ok := _UnitNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UnitNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Unit values", s)
}

// UnitValues returns all values of the enum
func UnitValues() []Unit {
	return _UnitValues
}

// UnitStrings returns a slice of all String values of the enum
func UnitStrings() []string {
	strs := make([]string, len(_UnitNames))
	copy(strs, _UnitNames)
	return strs
}

// IsAUnit returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Unit) IsAUnit() bool {
	for _, v := range _UnitValues {
		if i == v {
			return true
		}
	}
	return false
}
