// Code generated by "enumer -type=Unit -transform=snake"; DO NOT EDIT.

//
package units

import (
	"fmt"
)

const _UnitName = "kilo_var_hourkilo_watt_hourjouleamperevoltwattvoltamperevardegreedegree_celsiushertzpercentno_unit"

var _UnitIndex = [...]uint8{0, 13, 27, 32, 38, 42, 46, 56, 59, 65, 79, 84, 91, 98}

func (i Unit) String() string {
	i -= 1
	if i < 0 || i >= Unit(len(_UnitIndex)-1) {
		return fmt.Sprintf("Unit(%d)", i+1)
	}
	return _UnitName[_UnitIndex[i]:_UnitIndex[i+1]]
}

var _UnitValues = []Unit{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}

var _UnitNameToValueMap = map[string]Unit{
	_UnitName[0:13]:  1,
	_UnitName[13:27]: 2,
	_UnitName[27:32]: 3,
	_UnitName[32:38]: 4,
	_UnitName[38:42]: 5,
	_UnitName[42:46]: 6,
	_UnitName[46:56]: 7,
	_UnitName[56:59]: 8,
	_UnitName[59:65]: 9,
	_UnitName[65:79]: 10,
	_UnitName[79:84]: 11,
	_UnitName[84:91]: 12,
	_UnitName[91:98]: 13,
}

// UnitString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UnitString(s string) (Unit, error) {
	if val, ok := _UnitNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Unit values", s)
}

// UnitValues returns all values of the enum
func UnitValues() []Unit {
	return _UnitValues
}

// IsAUnit returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Unit) IsAUnit() bool {
	for _, v := range _UnitValues {
		if i == v {
			return true
		}
	}
	return false
}
